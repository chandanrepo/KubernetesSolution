#We have deployed a few pods in this cluster in various namespaces. Inspect them and identify the pod which is not in a Ready state. Troubleshoot and fix the issue.

#Next, add a check to restart the container on the same pod if the command ls /var/www/html/file_check fails. This check should start after a delay of 10 seconds and run every 60 seconds.


apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"v1","kind":"Pod","metadata":{"annotations":{},"creationTimestamp":"2020-05-23T12:22:19Z","labels":{"run":"nginx"},"name":"nginx1401","namespace":"dev1401","resourceVersion":"742","selfLink":"/api/v1/namespaces/dev1401/pods/nginx1401","uid":"07c1620c-2204-4635-b485-27c868ddbfab"},"spec":{"containers":[{"image":"kodekloud/nginx","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["ls","/var/www/html/file_check"]},"initialDelaySeconds":10,"periodSeconds":60},"name":"nginx","ports":[{"containerPort":9080,"protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/","port":9080,"scheme":"HTTP"},"periodSeconds":10,"successThreshold":1,"timeoutSeconds":1},"resources":{},"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","volumeMounts":[{"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount","name":"default-token-cpqcr","readOnly":true}]}],"dnsPolicy":"ClusterFirst","enableServiceLinks":true,"nodeName":"node01","priority":0,"restartPolicy":"Never","schedulerName":"default-scheduler","securityContext":{},"serviceAccount":"default","serviceAccountName":"default","terminationGracePeriodSeconds":30,"tolerations":[{"effect":"NoExecute","key":"node.kubernetes.io/not-ready","operator":"Exists","tolerationSeconds":300},{"effect":"NoExecute","key":"node.kubernetes.io/unreachable","operator":"Exists","tolerationSeconds":300}],"volumes":[{"name":"default-token-cpqcr","secret":{"defaultMode":420,"secretName":"default-token-cpqcr"}}]},"status":{"conditions":[{"lastProbeTime":null,"lastTransitionTime":"2020-05-23T12:22:19Z","status":"True","type":"Initialized"},{"lastProbeTime":null,"lastTransitionTime":"2020-05-23T12:22:19Z","message":"containers with unready status: [nginx]","reason":"ContainersNotReady","status":"False","type":"Ready"},{"lastProbeTime":null,"lastTransitionTime":"2020-05-23T12:22:19Z","message":"containers with unready status: [nginx]","reason":"ContainersNotReady","status":"False","type":"ContainersReady"},{"lastProbeTime":null,"lastTransitionTime":"2020-05-23T12:22:19Z","status":"True","type":"PodScheduled"}],"containerStatuses":[{"containerID":"docker://ea773fb7580d3df07d9b037e2ce58903977953f54438de9d7b450c159d78f362","image":"kodekloud/nginx:latest","imageID":"docker-pullable://kodekloud/nginx@sha256:2862900861517dfaf9e0ed0f4fa199744a7410f4f78520866031c725c386bb5e","lastState":{},"name":"nginx","ready":false,"restartCount":0,"started":true,"state":{"running":{"startedAt":"2020-05-23T12:22:29Z"}}}],"hostIP":"172.17.0.37","phase":"Running","podIP":"10.44.0.1","podIPs":[{"ip":"10.44.0.1"}],"qosClass":"BestEffort","startTime":"2020-05-23T12:22:19Z"}}
  creationTimestamp: "2020-05-23T12:53:00Z"
  labels:
    run: nginx
  name: nginx1401
  namespace: dev1401
  resourceVersion: "3256"
  selfLink: /api/v1/namespaces/dev1401/pods/nginx1401
  uid: 11edc764-33da-46f6-837f-cd99b64e78d5
spec:
  containers:
  - image: kodekloud/nginx
    imagePullPolicy: IfNotPresent
    livenessProbe:
      exec:
        command:
        - ls
        - /var/www/html/file_check
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 60
      successThreshold: 1
      timeoutSeconds: 1
    name: nginx
    ports:
    - containerPort: 9080
      protocol: TCP
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /
        port: 9080
        scheme: HTTP
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-cpqcr
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: node01
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-cpqcr
    secret:
      defaultMode: 420
      secretName: default-token-cpqcr
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-05-23T12:53:00Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-05-23T12:53:09Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-05-23T12:53:09Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-05-23T12:53:00Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://89690fd7ecbb934181f439e42ca90b413a77de8d071abe65e8dfb7c425bc0331
    image: kodekloud/nginx:latest
    imageID: docker-pullable://kodekloud/nginx@sha256:2862900861517dfaf9e0ed0f4fa199744a7410f4f78520866031c725c386bb5e
    lastState: {}
    name: nginx
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-05-23T12:53:01Z"
  hostIP: 172.17.0.37
  phase: Running
  podIP: 10.44.0.1
  podIPs:
  - ip: 10.44.0.1
  qosClass: BestEffort
  startTime: "2020-05-23T12:53:00Z"
